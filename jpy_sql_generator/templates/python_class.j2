"""
Auto-generated {{ class_name }} class with SQLAlchemy methods.

This class is generated by jpy-sql-generator.
Do not edit this file manually - it will be overwritten.
"""

from typing import Optional, List, Dict, Any
from sqlalchemy import text
from sqlalchemy.engine import Connection, Result
from sqlalchemy.engine.row import Row


class {{ class_name }}:
    """
    {{ class_name }} with SQLAlchemy-based database operations.
    """

    def __init__(self, connection: Connection):
        """
        Initialize with database connection.

        Args:
            connection: SQLAlchemy database connection
        """
        self._connection = connection

{% for method in methods %}
    def {{ method.name }}(self{% if method.parameters %}, {{ method.parameters }}{% endif %}) -> {{ method.return_type }}:
        """
        {{ method.type.title() }} operation: {{ method.name }}.
        Statement type: {{ method.statement_type }}
{% if method.parameters_list %}
        Args:
{% for param in method.parameters_list %}
            {{ param }}: Parameter for {{ param }}
{% endfor %}

{% endif %}
        Returns:
{% if method.is_fetch %}
            List of result rows
{% else %}
            SQLAlchemy Result object
{% endif %}
        """
        sql = """
{% for line in method.sql_lines %}
        {{ line }}
{% endfor %}
        """

{% if method.parameters_list %}
        # Prepare parameters
        params = {
{% for sql_param, python_param in method.param_mapping.items() %}
            "{{ sql_param }}": {{ python_param }},
{% endfor %}
        }

{% endif %}
        # Execute SQL query
        try:
{% if method.parameters_list %}
            result = self._connection.execute(text(sql), params)
{% else %}
            result = self._connection.execute(text(sql))
{% endif %}

{% if method.is_fetch %}
            # Fetch results
            return result.fetchall()
{% else %}
            # Commit changes for non-select operations
            self._connection.commit()
            # Return result for non-select operations
            return result
{% endif %}
        except Exception as e:
{% if not method.is_fetch %}
            # Rollback on error for non-select operations
            self._connection.rollback()
{% endif %}
            raise e

{% endfor %} 